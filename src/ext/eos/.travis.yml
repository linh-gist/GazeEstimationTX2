dist: trusty # Use 'trusty' unless specified otherwise
os: linux # Use Linux unless specified otherwise
sudo: false

language: cpp

matrix:
  fast_finish: true # Don't wait for the builds that are allowed to fail
  include:
    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5 GENERATOR_NAME="Unix Makefiles"
      addons: { apt: { packages: ["g++-5"], sources: ["ubuntu-toolchain-r-test"] } }

    - env: C_COMPILER=gcc-6 CXX_COMPILER=g++-6 GENERATOR_NAME="Unix Makefiles"
      addons: { apt: { packages: ["g++-6"], sources: ["ubuntu-toolchain-r-test"] } }

    - env: C_COMPILER=gcc-7 CXX_COMPILER=g++-7 GENERATOR_NAME="Unix Makefiles"
      addons: { apt: { packages: ["g++-7"], sources: ["ubuntu-toolchain-r-test"] } }

    - env: C_COMPILER=gcc-8 CXX_COMPILER=g++-8 GENERATOR_NAME="Unix Makefiles"
      addons: { apt: { packages: ["g++-8"], sources: ["ubuntu-toolchain-r-test"] } }

    - env: C_COMPILER=clang-5.0 CXX_COMPILER=clang++-5.0 GENERATOR_NAME="Unix Makefiles"
      addons: { apt: { packages: ["g++-7", "clang-5.0"], sources: ["llvm-toolchain-trusty-5.0", "ubuntu-toolchain-r-test"] } }
      # g++-7 is needed here - otherwise g++-4.8 libstdc++ is used.

    - env: C_COMPILER=clang-5.0 CXX_COMPILER=clang++-5.0 GENERATOR_NAME="Unix Makefiles"
      addons: { apt: { packages: ["g++-8", "clang-5.0"], sources: ["llvm-toolchain-trusty-5.0", "ubuntu-toolchain-r-test"] } }

    - env: C_COMPILER=clang-6.0 CXX_COMPILER=clang++-6.0 GENERATOR_NAME="Unix Makefiles"
      addons: { apt: { packages: ["g++-8", "clang-6.0"], sources: ["llvm-toolchain-trusty-6.0", "ubuntu-toolchain-r-test"] } }

    - os: osx
      env: C_COMPILER=clang CXX_COMPILER=clang++ GENERATOR_NAME="Xcode"
      osx_image: xcode9.2

    - os: osx
      env: C_COMPILER=clang CXX_COMPILER=clang++ GENERATOR_NAME="Xcode"
      osx_image: xcode9.3

    - os: osx
      env: C_COMPILER=clang CXX_COMPILER=clang++ GENERATOR_NAME="Xcode"
      osx_image: xcode9.4

    - os: osx
      env: C_COMPILER=clang CXX_COMPILER=clang++ GENERATOR_NAME="Xcode"
      osx_image: xcode10

  allow_failures:
    # These are additional combinations that we test but allow to fail, as they're either older compilers (g++-5) or
    # uncommon combinations that would need some workarounds or updates to work.
    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5 GENERATOR_NAME="Unix Makefiles"
    - env: C_COMPILER=clang-5.0 CXX_COMPILER=clang++-5.0 GENERATOR_NAME="Unix Makefiles"
    - env: C_COMPILER=clang-6.0 CXX_COMPILER=clang++-6.0 GENERATOR_NAME="Unix Makefiles"
    - env: C_COMPILER=clang CXX_COMPILER=clang++ GENERATOR_NAME="Xcode"
      osx_image: xcode9.2
    - env: C_COMPILER=clang CXX_COMPILER=clang++ GENERATOR_NAME="Xcode"
      osx_image: xcode9.3
    - env: C_COMPILER=clang CXX_COMPILER=clang++ GENERATOR_NAME="Xcode"
      osx_image: xcode9.4
    - env: C_COMPILER=clang CXX_COMPILER=clang++ GENERATOR_NAME="Xcode"
      osx_image: xcode10

install:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      wget https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.tar.gz
      CMAKE_DIR=${TRAVIS_BUILD_DIR}/cmake && mkdir ${CMAKE_DIR}
      tar -xvzf cmake-3.8.2-Linux-x86_64.tar.gz --strip-components=1 -C ${CMAKE_DIR} # extract from inside the top-level directory to CMAKE_DIR
      export PATH=${CMAKE_DIR}/bin:${PATH}
      pyenv global system 3.6 # Workaround for travis-ci/issues/8363
      sudo apt-get update -q
      sudo apt-get install libboost-all-dev libopencv-dev -y
    else
      brew install cmake || brew upgrade cmake
      brew install boost
      /usr/bin/yes | pip2 uninstall numpy # see: travis-ci/issues/6688
      brew install opencv
    fi
  - cmake --version

before_script:
  - mkdir build
  - cd build
  - cmake -G "${GENERATOR_NAME}" -DCMAKE_C_COMPILER=${C_COMPILER} -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCMAKE_INSTALL_PREFIX=../install -DEOS_BUILD_EXAMPLES=on -DEOS_BUILD_UTILS=on -DEOS_GENERATE_PYTHON_BINDINGS=on -DPYTHON_EXECUTABLE=`which python3.6` ..

script:
  - cmake --build . --config Release
  - cmake --build . --target install --config Release
